@page "/login-with-recovery-code"
@using System.ComponentModel.DataAnnotations
@using BlazorWasmAuth.Identity
@using BlazorWasmAuth.Identity.Models
@inject IAccountManagement Acct
@inject ILogger<LoginWithRecoveryCode> Logger
@inject NavigationManager Navigation

<PageTitle>Recovery code verification</PageTitle>

<h1>Recovery code verification</h1>
<hr />
<AuthorizeView>
    <Authorized>
        <div class="alert alert-success">You're logged in as @context.User.Identity?.Name.</div>
    </Authorized>
    <NotAuthorized>
        @if (formResult?.ErrorList is not null)
        {
            @foreach (var error in formResult.ErrorList)
            {
                <div class="alert alert-danger">@error</div>
            }
        }
        <p>
            You have requested to log in with a recovery code. This login isn't remembered until you provide
            an authenticator app code at log in or disable 2FA and log in again.
        </p>
        <div class="row">
            <div class="col">
                <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post" Context="editform_context">
                    <DataAnnotationsValidator />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="Input.Email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="Input.Password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.TwoFactorRecoveryCode" id="Input.TwoFactorRecoveryCode" class="form-control" autocomplete="off" placeholder="Recovery Code" />
                        <label for="Input.RecoveryCode" class="form-label">Recovery Code</label>
                        <ValidationMessage For="() => Input.TwoFactorRecoveryCode" class="text-danger" />
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </EditForm>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private FormResult? formResult;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task OnValidSubmitAsync()
    {
        var twoFactorRecoveryCode = Input.TwoFactorRecoveryCode.Replace(" ", string.Empty).Replace("-", string.Empty);
        formResult = await Acct.LoginTwoFactorRecoveryCodeAsync(Input.Email, Input.Password, twoFactorRecoveryCode);

        if (formResult.Succeeded && !string.IsNullOrEmpty(ReturnUrl))
        {
            Navigation.NavigateTo(ReturnUrl);
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Recovery Code")]
        public string TwoFactorRecoveryCode { get; set; } = string.Empty;
    }
}
